openapi: 3.0.2
# Revisions:
# 2019-05-09 initial version
# 2019-05-11 added nullable values to support patch
# 2019-05-17 TileRow and TileCol are now 'numbers' (not strings)
# 2019-05-17 "unless a different coordinate reference system is specified in the parameter `bbox-crs`." has been removed and instead we have added "unless a different coordinate         reference system is specified by another parameter in the API."
# 2019-05-21 "The default Tiling Scheme is the Google Maps Tiling Scheme" is changed to "The default Tiling Scheme is the WebMercatorQuad (sometimes refered as Google Maps Tiling Scheme)"
# 2019-05-21 "CRSId" has been added
#
info:
  title: OGC API Maps Building Blocks
  description: |-
    Common components used in the OGC API maps standards.

    This document is also available in [GitHub](https://github.com/opengeospatial/OGC-API-Map-Tiles/tree/master/standard/openapi).

  version: "1.0.0"
  contact:
    name: Joan Maso
    email: joan.maso@uab.cat
  license:
    name: OGC License
    url: 'https://raw.githubusercontent.com/opengeospatial/OGC-API-Map-Tiles/master/LICENSE'

components:
  ####################
  # Common data models
  ####################
  schemas:
    #############################
    # From OGC API Styles?
    #############################
    collectionInfo:
      type: object
      properties:
        maps:
          type: object
          properties:
            links:
              type: array
              items:
                $ref: 'https://raw.githubusercontent.com/opengeospatial/OGC-API-Map-Tiles/master/standard/openapi/ogc-api-common.yaml#/components/schemas/link'
                example:
                  - href: 'http://data.example.com/collections/buildings/maps'
                    rel: map
                    type: 'image/png'
                  - href: 'http://data.example.com/collections/buildings/maps/info'
                    rel: info
                    type: 'text/html'
            # A WMS layer definition has id, title, description, keyword that are already defined in OWS Common
            # wgs84Bounding is the 'extent' that is already defined in OWS Common
            spatialExtent:
              type: array
              description: |-
                Minimum spatial extent surrounding the layer for each CRS available
              items:
                $ref: '#/components/schemas/spatial'
                example:
                  - bbox:
                      - -180
                      - -90
                      - 180
                      - 90
                    crs: 'http://www.opengis.net/def/crs/OGC/1.3/CRS84'
                  - bbox:
                      - -20037508.3427892
                      - -20037508.3427892
                      - 20037508.3427892
                      - 20037508.3427892
                    crs: 'http://www.opengis.net/def/crs/EPSG/0/3395'
            crsLibray:
              type: string
              description: |-
                Reference to a CRS library giving support to a comprehensive list of CRSs that are not advertised but supported anyway.
              example: PROJ4G
            attribution:
              type: string
              description: |-
                The provider of the source data for the collection. Map Browsers are supposed to make this information visible to the user.
              example: OpenStreetMap
            minScaleDenominador:
              type: number
              description: |-
                Minimum scale denominator (inclusive) for which it is appropriate to generate a map of this collection
              example: 10
            maxScaleDenominador:
              type: number
              description: |-
                Maximum scale denominator (inclusive) for which it is appropriate to generate a map of this collection
              example: 10000000
            #spatialResolution (resx) this should be part of the common metadata but currently is not.
            recomendedFormat:
              type: string
              description: |-
                  Recommended output formats for a map request. The map operation details all available formats for the OGC API maps. In contrast, this is the better one for this type of information. It would be one of the supported for the map operation
              example: 'image/jpeg'
            #queryable is not included here because it is indicated by a link with 'rel':'info'
            cascaded:
              type: number
              description: |-
                Indicates how main times the layer has been retransmitted by another map service or API (cascading).
              example: 0
            opaque:
              type: boolean
              description: |-
                Indicates whether the map data represents vector features that probably do not completely fill space or the map data are mostly or completely opaque.
              example: false
            noSubsets:
              type: boolean
              description: |-
                Indicates whether the server can produce a map that is a subset of the full bounding box.
              example: false
            fixedWidth:
              type: number
              description: |-
                Indicates that the server can only produce map of a fixed width instead of an arbitrary width
            fixedHeight:
              type: number
              description: |-
                Indicates that the server can only produce map of a fixed height instead of an arbitrary height
            styles:
              $ref: '#/components/schemas/style-set'
            defaultStyle:
              type: string
              description: |-
                the style id of a recommended default style to use for this collection
              example: 'topographic'
    collectionInfo-patch:
      type: object
      properties:
        styles:
          $ref: 'https://raw.githubusercontent.com/opengeospatial/OGC-API-Map-Tiles/master/standard/openapi/ogc-api-maps.yaml#/components/schemas/style-set'
        defaultStyle:
          type: string
          nullable: true
          description: |-
            the style id of a recommended default style to use for this collection
          example: 'topographic'
    style-set:
      type: array
      nullable: true
      items:
        $ref: '#/components/schemas/style-set-entry'
      example:
        - id: 'night'
          title: 'Topographic night style'
          links:
          - href: 'https://example.com/api/1.0/styles/night?f=mapbox'
            type: 'application/vnd.mapbox.style+json'
            rel: 'stylesheet'
          - href: 'https://example.com/api/1.0/styles/night?f=sld10'
            type: 'application/vnd.ogc.sld+xml;version=1.0'
            rel: 'stylesheet'
          - href: 'https://example.com/api/1.0/styles/night/metadata?f=json'
            type: 'application/json'
            rel: 'describedBy'
        - id: 'topographic'
          title: 'Regular topographic style'
          links:
          - href: 'https://example.com/api/1.0/styles/topographic?f=mapbox'
            type: 'application/vnd.mapbox.style+json'
            rel: 'stylesheet'
          - href: 'https://example.com/api/1.0/styles/topographic?f=sld10'
            type: 'application/vnd.ogc.sld+xml;version=1.0'
            rel: 'stylesheet'
          - href: 'https://example.com/api/1.0/styles/topographic/metadata?f=json'
            type: 'application/json'
            rel: 'describedBy'
    style-set-entry:
      type: object
      nullable: true
      required:
        - id
        - links
      properties:
        id:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        links:
          type: array
          nullable: true
          minItems: 1
          items:
            $ref: 'https://raw.githubusercontent.com/opengeospatial/OGC-API-Map-Tiles/master/standard/openapi/ogc-api-common.yaml#/components/schemas/link'
    crs-entry:
      type: object
      nullable: true
      required:
        - id
        - links
      properties:
        id:
          type: string
          nullable: false
        title:
          type: string
          nullable: true
        links:
          type: array
          nullable: false
          minItems: 1
          items:
            $ref: 'https://raw.githubusercontent.com/opengeospatial/OGC-API-Map-Tiles/master/standard/openapi/ogc-api-common.yaml#/components/schemas/link'
    simbologyEncoding:
      description: |-
        SE encoding to create a map.
      type: string
  ####################
  # Common parameters
  ####################
  parameters:
    #############################
    # From OGC API Maps and Tiles
    #############################
    mapId:
      name: mapId
      in: path
      description: Local identifier of a specific map created with a post operation
      required: true
      style: simple
      explode: false
      schema:
        type: string
    crsId:
      name: crsId
      in: path
      description: |-
        Local identifier of a specific CRS. A list of all available CRSIds can be found under the /CRS path. The default CRS is WGS 84.
      required: true
      schema:
        type: string
      example: WGS84
    styleId:
      name: styleId
      in: path
      description: |-
        The styleId that should be included in the map or tile. Each collectionId has a valid list of stylesId. To know the valid styleId values of each collectionId use /collections/{collectionId}.
      required: true
      schema:
        type: string
    styles:
      name: styles
      in: query
      description: |-
        The styleId that should be included in the map or tile. Each collectionId has a valid list of stylesId. To know the valid styleId values of each collectionId use /collections/{collectionId}.
        The parameter value is a list of comma separated styles identifiers. If the parameter 'collections' exists, the list should be as long as 'collections' and each styleId correspons to one collectionId. If the path includes 'collections/{collectionId}' one style should be mentioned.
      required: false
      style: form
      explode: false
      schema:
        type: string
    width:
      name: width
      in: query
      description: |-
        Width in pixels of map picture.
      required: true
      style: form
      explode: false
      schema:
        type: number
    height:
      name: height
      in: query
      description: |-
        Height in pixels of map picture.
      required: true
      style: form
      explode: false
      schema:
        type: number
    transparent:
      name: transparent
      in: query
      description: |-
        Background transparency of map (default=FALSE).
      required: false
      style: form
      explode: false
      schema:
        type: boolean
    bgcolor:
      name: bgcolor
      in: query
      description: |-
        Hexadecimal red-green-blue[-alpha] color value for the background color (default=0xFFFFFF) if alpha is not specified "opaque" opacity is assumed.
      required: false
      style: form
      explode: false
      schema:
        type: string
    map-crs:
      name: crs
      in: query
      description: |-
        CRSId used to render the map. It is also the CRS of the bbox parameter.
        You can only ask for CRSs that are valid for the collectionId.
      required: false
      style: form
      explode: false
      schema:
        type: string
      example: 'EPSG:4326'
    mapFormat:
      name: mapFormat
      in: query
      description: |-
        Internal format of the maps referenced by a getFeatureInfo.
      required: false
      style: form
      schema:
        type: string

  #######################
  # Common request bodies
  #######################
  requestBodies: {}

  ####################
  # Common responses
  ####################
  responses:
    {}

  #########################
  # Common response headers
  #########################
  headers:
    {}

  #######################
  # Common path items
  # NOTE: Referencing pathitems does not seem to work, so I have stopped defining/using them
  #######################

  ######################################
  # Common examples of input/output data
  ######################################
  examples: {}

  #########################
  # Common link definitions
  #########################
  links: {}

  #########################
  # Common callback definitions
  #########################
  callbacks: {}
